"""
sandbox.py

This file deals with actually executing the Python file generated by the Autograder class.
It also handles passing data between the file and the discord bot.
"""

import multiprocessing as mp
import multiprocessing.queues as mpq
import copy
import asyncio

# Code referenced from documentation: https://docs.python.org/3/library/multiprocessing.html

class Sandbox(object):
    def __init__(self):
        pass

    def runTest(self, q, file):
        x = copy.copy(globals())
        x['__name__'] = 'sandbox'
        # Stores the result of each test case.
        x['autograder'] = {}
        exec(file, x)
        q.put(x['autograder'])

    def run(self, file):
        q = mp.Queue()
        p = mp.Process(target=self.runTest, args=(q, file))
        p.start()
        try:
            x = q.get(timeout=30)
            p.join()
            if not isinstance(x, Exception):
                return x
        except mpq.Empty:
            p.terminate()
            print('oh')


async def main():
    from autograder import Autograder as ag
    # Load file
    myAuto = ag('https://s.matc.io/hw3.py', [])
    # myAuto = ag('https://s.matc.io/timeoutTest.py', [])
    await myAuto.fetch()
    sand = Sandbox()
    print(sand.run(myAuto.file))


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())